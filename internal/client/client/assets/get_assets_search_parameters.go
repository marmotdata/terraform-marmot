// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAssetsSearchParams creates a new GetAssetsSearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAssetsSearchParams() *GetAssetsSearchParams {
	return &GetAssetsSearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAssetsSearchParamsWithTimeout creates a new GetAssetsSearchParams object
// with the ability to set a timeout on a request.
func NewGetAssetsSearchParamsWithTimeout(timeout time.Duration) *GetAssetsSearchParams {
	return &GetAssetsSearchParams{
		timeout: timeout,
	}
}

// NewGetAssetsSearchParamsWithContext creates a new GetAssetsSearchParams object
// with the ability to set a context for a request.
func NewGetAssetsSearchParamsWithContext(ctx context.Context) *GetAssetsSearchParams {
	return &GetAssetsSearchParams{
		Context: ctx,
	}
}

// NewGetAssetsSearchParamsWithHTTPClient creates a new GetAssetsSearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAssetsSearchParamsWithHTTPClient(client *http.Client) *GetAssetsSearchParams {
	return &GetAssetsSearchParams{
		HTTPClient: client,
	}
}

/*
GetAssetsSearchParams contains all the parameters to send to the API endpoint

	for the get assets search operation.

	Typically these are written to a http.Request.
*/
type GetAssetsSearchParams struct {

	/* CalculateCounts.

	   Calculate filter counts
	*/
	CalculateCounts *bool

	/* Limit.

	   Number of items to return

	   Default: 50
	*/
	Limit *int64

	/* Offset.

	   Number of items to skip
	*/
	Offset *int64

	/* Q.

	   Search query
	*/
	Q *string

	/* Services.

	   Filter by services
	*/
	Services []string

	/* Tags.

	   Filter by tags
	*/
	Tags []string

	/* Types.

	   Filter by asset types
	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get assets search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAssetsSearchParams) WithDefaults() *GetAssetsSearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get assets search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAssetsSearchParams) SetDefaults() {
	var (
		calculateCountsDefault = bool(false)

		limitDefault = int64(50)

		offsetDefault = int64(0)
	)

	val := GetAssetsSearchParams{
		CalculateCounts: &calculateCountsDefault,
		Limit:           &limitDefault,
		Offset:          &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get assets search params
func (o *GetAssetsSearchParams) WithTimeout(timeout time.Duration) *GetAssetsSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get assets search params
func (o *GetAssetsSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get assets search params
func (o *GetAssetsSearchParams) WithContext(ctx context.Context) *GetAssetsSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get assets search params
func (o *GetAssetsSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get assets search params
func (o *GetAssetsSearchParams) WithHTTPClient(client *http.Client) *GetAssetsSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get assets search params
func (o *GetAssetsSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCalculateCounts adds the calculateCounts to the get assets search params
func (o *GetAssetsSearchParams) WithCalculateCounts(calculateCounts *bool) *GetAssetsSearchParams {
	o.SetCalculateCounts(calculateCounts)
	return o
}

// SetCalculateCounts adds the calculateCounts to the get assets search params
func (o *GetAssetsSearchParams) SetCalculateCounts(calculateCounts *bool) {
	o.CalculateCounts = calculateCounts
}

// WithLimit adds the limit to the get assets search params
func (o *GetAssetsSearchParams) WithLimit(limit *int64) *GetAssetsSearchParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get assets search params
func (o *GetAssetsSearchParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get assets search params
func (o *GetAssetsSearchParams) WithOffset(offset *int64) *GetAssetsSearchParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get assets search params
func (o *GetAssetsSearchParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the get assets search params
func (o *GetAssetsSearchParams) WithQ(q *string) *GetAssetsSearchParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get assets search params
func (o *GetAssetsSearchParams) SetQ(q *string) {
	o.Q = q
}

// WithServices adds the services to the get assets search params
func (o *GetAssetsSearchParams) WithServices(services []string) *GetAssetsSearchParams {
	o.SetServices(services)
	return o
}

// SetServices adds the services to the get assets search params
func (o *GetAssetsSearchParams) SetServices(services []string) {
	o.Services = services
}

// WithTags adds the tags to the get assets search params
func (o *GetAssetsSearchParams) WithTags(tags []string) *GetAssetsSearchParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get assets search params
func (o *GetAssetsSearchParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithTypes adds the types to the get assets search params
func (o *GetAssetsSearchParams) WithTypes(types []string) *GetAssetsSearchParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get assets search params
func (o *GetAssetsSearchParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *GetAssetsSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CalculateCounts != nil {

		// query param calculateCounts
		var qrCalculateCounts bool

		if o.CalculateCounts != nil {
			qrCalculateCounts = *o.CalculateCounts
		}
		qCalculateCounts := swag.FormatBool(qrCalculateCounts)
		if qCalculateCounts != "" {

			if err := r.SetQueryParam("calculateCounts", qCalculateCounts); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Services != nil {

		// binding items for services
		joinedServices := o.bindParamServices(reg)

		// query array param services
		if err := r.SetQueryParam("services", joinedServices...); err != nil {
			return err
		}
	}

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if o.Types != nil {

		// binding items for types
		joinedTypes := o.bindParamTypes(reg)

		// query array param types
		if err := r.SetQueryParam("types", joinedTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAssetsSearch binds the parameter services
func (o *GetAssetsSearchParams) bindParamServices(formats strfmt.Registry) []string {
	servicesIR := o.Services

	var servicesIC []string
	for _, servicesIIR := range servicesIR { // explode []string

		servicesIIV := servicesIIR // string as string
		servicesIC = append(servicesIC, servicesIIV)
	}

	// items.CollectionFormat: "csv"
	servicesIS := swag.JoinByFormat(servicesIC, "csv")

	return servicesIS
}

// bindParamGetAssetsSearch binds the parameter tags
func (o *GetAssetsSearchParams) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: "csv"
	tagsIS := swag.JoinByFormat(tagsIC, "csv")

	return tagsIS
}

// bindParamGetAssetsSearch binds the parameter types
func (o *GetAssetsSearchParams) bindParamTypes(formats strfmt.Registry) []string {
	typesIR := o.Types

	var typesIC []string
	for _, typesIIR := range typesIR { // explode []string

		typesIIV := typesIIR // string as string
		typesIC = append(typesIC, typesIIV)
	}

	// items.CollectionFormat: "csv"
	typesIS := swag.JoinByFormat(typesIC, "csv")

	return typesIS
}
