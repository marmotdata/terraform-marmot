// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new assets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new assets API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new assets API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for assets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAssetsID(params *DeleteAssetsIDParams, opts ...ClientOption) (*DeleteAssetsIDNoContent, error)

	DeleteAssetsIDTags(params *DeleteAssetsIDTagsParams, opts ...ClientOption) (*DeleteAssetsIDTagsOK, error)

	GetAssetsDocumentationMrn(params *GetAssetsDocumentationMrnParams, opts ...ClientOption) (*GetAssetsDocumentationMrnOK, error)

	GetAssetsID(params *GetAssetsIDParams, opts ...ClientOption) (*GetAssetsIDOK, error)

	GetAssetsList(params *GetAssetsListParams, opts ...ClientOption) (*GetAssetsListOK, error)

	GetAssetsLookupTypeName(params *GetAssetsLookupTypeNameParams, opts ...ClientOption) (*GetAssetsLookupTypeNameOK, error)

	GetAssetsMatchPattern(params *GetAssetsMatchPatternParams, opts ...ClientOption) (*GetAssetsMatchPatternOK, error)

	GetAssetsQualifiedNameQualifiedName(params *GetAssetsQualifiedNameQualifiedNameParams, opts ...ClientOption) (*GetAssetsQualifiedNameQualifiedNameOK, error)

	GetAssetsSearch(params *GetAssetsSearchParams, opts ...ClientOption) (*GetAssetsSearchOK, error)

	GetAssetsSuggestionsMetadataFields(params *GetAssetsSuggestionsMetadataFieldsParams, opts ...ClientOption) (*GetAssetsSuggestionsMetadataFieldsOK, error)

	GetAssetsSuggestionsMetadataValues(params *GetAssetsSuggestionsMetadataValuesParams, opts ...ClientOption) (*GetAssetsSuggestionsMetadataValuesOK, error)

	GetAssetsSuggestionsTags(params *GetAssetsSuggestionsTagsParams, opts ...ClientOption) (*GetAssetsSuggestionsTagsOK, error)

	GetAssetsSummary(params *GetAssetsSummaryParams, opts ...ClientOption) (*GetAssetsSummaryOK, error)

	PostAssets(params *PostAssetsParams, opts ...ClientOption) (*PostAssetsCreated, error)

	PostAssetsBatch(params *PostAssetsBatchParams, opts ...ClientOption) (*PostAssetsBatchOK, error)

	PostAssetsDocumentation(params *PostAssetsDocumentationParams, opts ...ClientOption) (*PostAssetsDocumentationOK, error)

	PostAssetsDocumentationBatch(params *PostAssetsDocumentationBatchParams, opts ...ClientOption) (*PostAssetsDocumentationBatchOK, error)

	PostAssetsIDTags(params *PostAssetsIDTagsParams, opts ...ClientOption) (*PostAssetsIDTagsOK, error)

	PutAssetsID(params *PutAssetsIDParams, opts ...ClientOption) (*PutAssetsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAssetsID deletes an asset

Delete an asset from the system
*/
func (a *Client) DeleteAssetsID(params *DeleteAssetsIDParams, opts ...ClientOption) (*DeleteAssetsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAssetsID",
		Method:             "DELETE",
		PathPattern:        "/assets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAssetsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssetsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAssetsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAssetsIDTags removes tag from asset

Remove a tag from an existing asset
*/
func (a *Client) DeleteAssetsIDTags(params *DeleteAssetsIDTagsParams, opts ...ClientOption) (*DeleteAssetsIDTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssetsIDTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAssetsIDTags",
		Method:             "DELETE",
		PathPattern:        "/assets/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAssetsIDTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssetsIDTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAssetsIDTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsDocumentationMrn gets asset documentation

Get documentation for a specific asset
*/
func (a *Client) GetAssetsDocumentationMrn(params *GetAssetsDocumentationMrnParams, opts ...ClientOption) (*GetAssetsDocumentationMrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsDocumentationMrnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsDocumentationMrn",
		Method:             "GET",
		PathPattern:        "/assets/documentation/{mrn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsDocumentationMrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsDocumentationMrnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsDocumentationMrn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsID gets an asset by ID

Get detailed information about a specific asset
*/
func (a *Client) GetAssetsID(params *GetAssetsIDParams, opts ...ClientOption) (*GetAssetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsID",
		Method:             "GET",
		PathPattern:        "/assets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsList lists assets with pagination

Get a paginated list of assets
*/
func (a *Client) GetAssetsList(params *GetAssetsListParams, opts ...ClientOption) (*GetAssetsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsList",
		Method:             "GET",
		PathPattern:        "/assets/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsLookupTypeName lookups asset by type and name

Get an asset using its type and name
*/
func (a *Client) GetAssetsLookupTypeName(params *GetAssetsLookupTypeNameParams, opts ...ClientOption) (*GetAssetsLookupTypeNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsLookupTypeNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsLookupTypeName",
		Method:             "GET",
		PathPattern:        "/assets/lookup/{type}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsLookupTypeNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsLookupTypeNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsLookupTypeName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsMatchPattern matches asset pattern

Find assets matching a pattern
*/
func (a *Client) GetAssetsMatchPattern(params *GetAssetsMatchPatternParams, opts ...ClientOption) (*GetAssetsMatchPatternOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsMatchPatternParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsMatchPattern",
		Method:             "GET",
		PathPattern:        "/assets/match-pattern",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsMatchPatternReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsMatchPatternOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsMatchPattern: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsQualifiedNameQualifiedName gets an asset by qualified name

Get detailed information about a specific asset using its qualified name
*/
func (a *Client) GetAssetsQualifiedNameQualifiedName(params *GetAssetsQualifiedNameQualifiedNameParams, opts ...ClientOption) (*GetAssetsQualifiedNameQualifiedNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsQualifiedNameQualifiedNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsQualifiedNameQualifiedName",
		Method:             "GET",
		PathPattern:        "/assets/qualified-name/{qualifiedName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsQualifiedNameQualifiedNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsQualifiedNameQualifiedNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsQualifiedNameQualifiedName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsSearch searches assets

Search for assets using query string and filters
*/
func (a *Client) GetAssetsSearch(params *GetAssetsSearchParams, opts ...ClientOption) (*GetAssetsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsSearch",
		Method:             "GET",
		PathPattern:        "/assets/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsSuggestionsMetadataFields gets metadata field suggestions

Get suggestions for metadata fields and their types
*/
func (a *Client) GetAssetsSuggestionsMetadataFields(params *GetAssetsSuggestionsMetadataFieldsParams, opts ...ClientOption) (*GetAssetsSuggestionsMetadataFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsSuggestionsMetadataFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsSuggestionsMetadataFields",
		Method:             "GET",
		PathPattern:        "/assets/suggestions/metadata/fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsSuggestionsMetadataFieldsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsSuggestionsMetadataFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsSuggestionsMetadataFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsSuggestionsMetadataValues gets metadata value suggestions

Get suggestions for values of a specific metadata field
*/
func (a *Client) GetAssetsSuggestionsMetadataValues(params *GetAssetsSuggestionsMetadataValuesParams, opts ...ClientOption) (*GetAssetsSuggestionsMetadataValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsSuggestionsMetadataValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsSuggestionsMetadataValues",
		Method:             "GET",
		PathPattern:        "/assets/suggestions/metadata/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsSuggestionsMetadataValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsSuggestionsMetadataValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsSuggestionsMetadataValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsSuggestionsTags gets tag suggestions

Get suggestions for asset tags
*/
func (a *Client) GetAssetsSuggestionsTags(params *GetAssetsSuggestionsTagsParams, opts ...ClientOption) (*GetAssetsSuggestionsTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsSuggestionsTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsSuggestionsTags",
		Method:             "GET",
		PathPattern:        "/assets/suggestions/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsSuggestionsTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsSuggestionsTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsSuggestionsTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssetsSummary gets asset summary

Get the total count of assets by type
*/
func (a *Client) GetAssetsSummary(params *GetAssetsSummaryParams, opts ...ClientOption) (*GetAssetsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssetsSummary",
		Method:             "GET",
		PathPattern:        "/assets/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetsSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssetsSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAssets creates a new asset

Create a new asset in the system
*/
func (a *Client) PostAssets(params *PostAssetsParams, opts ...ClientOption) (*PostAssetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAssets",
		Method:             "POST",
		PathPattern:        "/assets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAssetsBatch batches create assets

Create or update multiple assets in a single request
*/
func (a *Client) PostAssetsBatch(params *PostAssetsBatchParams, opts ...ClientOption) (*PostAssetsBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetsBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAssetsBatch",
		Method:             "POST",
		PathPattern:        "/assets/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAssetsBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetsBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAssetsBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAssetsDocumentation creates asset documentation

Create or update documentation for an asset
*/
func (a *Client) PostAssetsDocumentation(params *PostAssetsDocumentationParams, opts ...ClientOption) (*PostAssetsDocumentationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetsDocumentationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAssetsDocumentation",
		Method:             "POST",
		PathPattern:        "/assets/documentation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAssetsDocumentationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetsDocumentationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAssetsDocumentation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAssetsDocumentationBatch batches create documentation

Create or update documentation for multiple assets
*/
func (a *Client) PostAssetsDocumentationBatch(params *PostAssetsDocumentationBatchParams, opts ...ClientOption) (*PostAssetsDocumentationBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetsDocumentationBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAssetsDocumentationBatch",
		Method:             "POST",
		PathPattern:        "/assets/documentation/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAssetsDocumentationBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetsDocumentationBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAssetsDocumentationBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAssetsIDTags adds tag to asset

Add a new tag to an existing asset
*/
func (a *Client) PostAssetsIDTags(params *PostAssetsIDTagsParams, opts ...ClientOption) (*PostAssetsIDTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetsIDTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAssetsIDTags",
		Method:             "POST",
		PathPattern:        "/assets/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAssetsIDTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetsIDTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAssetsIDTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAssetsID updates an asset

Update an existing asset's information
*/
func (a *Client) PutAssetsID(params *PutAssetsIDParams, opts ...ClientOption) (*PutAssetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAssetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAssetsID",
		Method:             "PUT",
		PathPattern:        "/assets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAssetsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAssetsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAssetsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
