// Code generated by go-swagger; DO NOT EDIT.

package lineage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/marmotdata/terraform-provider-marmot/internal/client/models"
)

// PostLineageDirectReader is a Reader for the PostLineageDirect structure.
type PostLineageDirectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLineageDirectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostLineageDirectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLineageDirectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostLineageDirectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /lineage/direct] PostLineageDirect", response, response.Code())
	}
}

// NewPostLineageDirectOK creates a PostLineageDirectOK with default headers values
func NewPostLineageDirectOK() *PostLineageDirectOK {
	return &PostLineageDirectOK{}
}

/*
PostLineageDirectOK describes a response with status code 200, with default header values.

OK
*/
type PostLineageDirectOK struct {
	Payload *models.LineageLineageEdge
}

// IsSuccess returns true when this post lineage direct o k response has a 2xx status code
func (o *PostLineageDirectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post lineage direct o k response has a 3xx status code
func (o *PostLineageDirectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post lineage direct o k response has a 4xx status code
func (o *PostLineageDirectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post lineage direct o k response has a 5xx status code
func (o *PostLineageDirectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post lineage direct o k response a status code equal to that given
func (o *PostLineageDirectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post lineage direct o k response
func (o *PostLineageDirectOK) Code() int {
	return 200
}

func (o *PostLineageDirectOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /lineage/direct][%d] postLineageDirectOK %s", 200, payload)
}

func (o *PostLineageDirectOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /lineage/direct][%d] postLineageDirectOK %s", 200, payload)
}

func (o *PostLineageDirectOK) GetPayload() *models.LineageLineageEdge {
	return o.Payload
}

func (o *PostLineageDirectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LineageLineageEdge)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLineageDirectBadRequest creates a PostLineageDirectBadRequest with default headers values
func NewPostLineageDirectBadRequest() *PostLineageDirectBadRequest {
	return &PostLineageDirectBadRequest{}
}

/*
PostLineageDirectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostLineageDirectBadRequest struct {
	Payload *models.CommonErrorResponse
}

// IsSuccess returns true when this post lineage direct bad request response has a 2xx status code
func (o *PostLineageDirectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post lineage direct bad request response has a 3xx status code
func (o *PostLineageDirectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post lineage direct bad request response has a 4xx status code
func (o *PostLineageDirectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post lineage direct bad request response has a 5xx status code
func (o *PostLineageDirectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post lineage direct bad request response a status code equal to that given
func (o *PostLineageDirectBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post lineage direct bad request response
func (o *PostLineageDirectBadRequest) Code() int {
	return 400
}

func (o *PostLineageDirectBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /lineage/direct][%d] postLineageDirectBadRequest %s", 400, payload)
}

func (o *PostLineageDirectBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /lineage/direct][%d] postLineageDirectBadRequest %s", 400, payload)
}

func (o *PostLineageDirectBadRequest) GetPayload() *models.CommonErrorResponse {
	return o.Payload
}

func (o *PostLineageDirectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLineageDirectInternalServerError creates a PostLineageDirectInternalServerError with default headers values
func NewPostLineageDirectInternalServerError() *PostLineageDirectInternalServerError {
	return &PostLineageDirectInternalServerError{}
}

/*
PostLineageDirectInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostLineageDirectInternalServerError struct {
	Payload *models.CommonErrorResponse
}

// IsSuccess returns true when this post lineage direct internal server error response has a 2xx status code
func (o *PostLineageDirectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post lineage direct internal server error response has a 3xx status code
func (o *PostLineageDirectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post lineage direct internal server error response has a 4xx status code
func (o *PostLineageDirectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post lineage direct internal server error response has a 5xx status code
func (o *PostLineageDirectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post lineage direct internal server error response a status code equal to that given
func (o *PostLineageDirectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post lineage direct internal server error response
func (o *PostLineageDirectInternalServerError) Code() int {
	return 500
}

func (o *PostLineageDirectInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /lineage/direct][%d] postLineageDirectInternalServerError %s", 500, payload)
}

func (o *PostLineageDirectInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /lineage/direct][%d] postLineageDirectInternalServerError %s", 500, payload)
}

func (o *PostLineageDirectInternalServerError) GetPayload() *models.CommonErrorResponse {
	return o.Payload
}

func (o *PostLineageDirectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
