// Code generated by go-swagger; DO NOT EDIT.

package lineage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new lineage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new lineage API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new lineage API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for lineage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLineageDirectID(params *DeleteLineageDirectIDParams, opts ...ClientOption) (*DeleteLineageDirectIDOK, error)

	GetLineageAssetsID(params *GetLineageAssetsIDParams, opts ...ClientOption) (*GetLineageAssetsIDOK, error)

	GetLineageDirectID(params *GetLineageDirectIDParams, opts ...ClientOption) (*GetLineageDirectIDOK, error)

	PostLineageBatch(params *PostLineageBatchParams, opts ...ClientOption) (*PostLineageBatchOK, error)

	PostLineageDirect(params *PostLineageDirectParams, opts ...ClientOption) (*PostLineageDirectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteLineageDirectID deletes direct lineage

Delete a direct lineage connection by its ID
*/
func (a *Client) DeleteLineageDirectID(params *DeleteLineageDirectIDParams, opts ...ClientOption) (*DeleteLineageDirectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLineageDirectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLineageDirectID",
		Method:             "DELETE",
		PathPattern:        "/lineage/direct/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLineageDirectIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLineageDirectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLineageDirectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLineageAssetsID gets asset lineage

Get upstream and downstream lineage for a specific asset
*/
func (a *Client) GetLineageAssetsID(params *GetLineageAssetsIDParams, opts ...ClientOption) (*GetLineageAssetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLineageAssetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLineageAssetsID",
		Method:             "GET",
		PathPattern:        "/lineage/assets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLineageAssetsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLineageAssetsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLineageAssetsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLineageDirectID gets direct lineage by ID

Get a specific direct lineage connection by its ID
*/
func (a *Client) GetLineageDirectID(params *GetLineageDirectIDParams, opts ...ClientOption) (*GetLineageDirectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLineageDirectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLineageDirectID",
		Method:             "GET",
		PathPattern:        "/lineage/direct/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLineageDirectIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLineageDirectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLineageDirectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLineageBatch batches create lineage edges

Create lineage edges in batch
*/
func (a *Client) PostLineageBatch(params *PostLineageBatchParams, opts ...ClientOption) (*PostLineageBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLineageBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLineageBatch",
		Method:             "POST",
		PathPattern:        "/lineage/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLineageBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLineageBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLineageBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLineageDirect creates direct lineage

Create a direct lineage connection between two assets and returns the created edge
*/
func (a *Client) PostLineageDirect(params *PostLineageDirectParams, opts ...ClientOption) (*PostLineageDirectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLineageDirectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLineageDirect",
		Method:             "POST",
		PathPattern:        "/lineage/direct",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLineageDirectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLineageDirectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLineageDirect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
