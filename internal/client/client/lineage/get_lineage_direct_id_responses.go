// Code generated by go-swagger; DO NOT EDIT.

package lineage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/marmotdata/terraform-provider-marmot/internal/client/models"
)

// GetLineageDirectIDReader is a Reader for the GetLineageDirectID structure.
type GetLineageDirectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLineageDirectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLineageDirectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetLineageDirectIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLineageDirectIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /lineage/direct/{id}] GetLineageDirectID", response, response.Code())
	}
}

// NewGetLineageDirectIDOK creates a GetLineageDirectIDOK with default headers values
func NewGetLineageDirectIDOK() *GetLineageDirectIDOK {
	return &GetLineageDirectIDOK{}
}

/*
GetLineageDirectIDOK describes a response with status code 200, with default header values.

OK
*/
type GetLineageDirectIDOK struct {
	Payload *models.LineageLineageEdge
}

// IsSuccess returns true when this get lineage direct Id o k response has a 2xx status code
func (o *GetLineageDirectIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get lineage direct Id o k response has a 3xx status code
func (o *GetLineageDirectIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lineage direct Id o k response has a 4xx status code
func (o *GetLineageDirectIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lineage direct Id o k response has a 5xx status code
func (o *GetLineageDirectIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get lineage direct Id o k response a status code equal to that given
func (o *GetLineageDirectIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get lineage direct Id o k response
func (o *GetLineageDirectIDOK) Code() int {
	return 200
}

func (o *GetLineageDirectIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /lineage/direct/{id}][%d] getLineageDirectIdOK %s", 200, payload)
}

func (o *GetLineageDirectIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /lineage/direct/{id}][%d] getLineageDirectIdOK %s", 200, payload)
}

func (o *GetLineageDirectIDOK) GetPayload() *models.LineageLineageEdge {
	return o.Payload
}

func (o *GetLineageDirectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LineageLineageEdge)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLineageDirectIDNotFound creates a GetLineageDirectIDNotFound with default headers values
func NewGetLineageDirectIDNotFound() *GetLineageDirectIDNotFound {
	return &GetLineageDirectIDNotFound{}
}

/*
GetLineageDirectIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLineageDirectIDNotFound struct {
	Payload *models.CommonErrorResponse
}

// IsSuccess returns true when this get lineage direct Id not found response has a 2xx status code
func (o *GetLineageDirectIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lineage direct Id not found response has a 3xx status code
func (o *GetLineageDirectIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lineage direct Id not found response has a 4xx status code
func (o *GetLineageDirectIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lineage direct Id not found response has a 5xx status code
func (o *GetLineageDirectIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get lineage direct Id not found response a status code equal to that given
func (o *GetLineageDirectIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get lineage direct Id not found response
func (o *GetLineageDirectIDNotFound) Code() int {
	return 404
}

func (o *GetLineageDirectIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /lineage/direct/{id}][%d] getLineageDirectIdNotFound %s", 404, payload)
}

func (o *GetLineageDirectIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /lineage/direct/{id}][%d] getLineageDirectIdNotFound %s", 404, payload)
}

func (o *GetLineageDirectIDNotFound) GetPayload() *models.CommonErrorResponse {
	return o.Payload
}

func (o *GetLineageDirectIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLineageDirectIDInternalServerError creates a GetLineageDirectIDInternalServerError with default headers values
func NewGetLineageDirectIDInternalServerError() *GetLineageDirectIDInternalServerError {
	return &GetLineageDirectIDInternalServerError{}
}

/*
GetLineageDirectIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetLineageDirectIDInternalServerError struct {
	Payload *models.CommonErrorResponse
}

// IsSuccess returns true when this get lineage direct Id internal server error response has a 2xx status code
func (o *GetLineageDirectIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lineage direct Id internal server error response has a 3xx status code
func (o *GetLineageDirectIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lineage direct Id internal server error response has a 4xx status code
func (o *GetLineageDirectIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lineage direct Id internal server error response has a 5xx status code
func (o *GetLineageDirectIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get lineage direct Id internal server error response a status code equal to that given
func (o *GetLineageDirectIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get lineage direct Id internal server error response
func (o *GetLineageDirectIDInternalServerError) Code() int {
	return 500
}

func (o *GetLineageDirectIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /lineage/direct/{id}][%d] getLineageDirectIdInternalServerError %s", 500, payload)
}

func (o *GetLineageDirectIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /lineage/direct/{id}][%d] getLineageDirectIdInternalServerError %s", 500, payload)
}

func (o *GetLineageDirectIDInternalServerError) GetPayload() *models.CommonErrorResponse {
	return o.Payload
}

func (o *GetLineageDirectIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
