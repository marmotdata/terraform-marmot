// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new users API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new users API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUsersApikeysID(params *DeleteUsersApikeysIDParams, opts ...ClientOption) (*DeleteUsersApikeysIDNoContent, error)

	DeleteUsersID(params *DeleteUsersIDParams, opts ...ClientOption) (*DeleteUsersIDNoContent, error)

	DeleteUsersOauthUnlinkIDProvider(params *DeleteUsersOauthUnlinkIDProviderParams, opts ...ClientOption) (*DeleteUsersOauthUnlinkIDProviderNoContent, error)

	GetUsers(params *GetUsersParams, opts ...ClientOption) (*GetUsersOK, error)

	GetUsersApikeys(params *GetUsersApikeysParams, opts ...ClientOption) (*GetUsersApikeysOK, error)

	GetUsersID(params *GetUsersIDParams, opts ...ClientOption) (*GetUsersIDOK, error)

	GetUsersMe(params *GetUsersMeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersMeOK, error)

	PostUsers(params *PostUsersParams, opts ...ClientOption) (*PostUsersOK, error)

	PostUsersApikeys(params *PostUsersApikeysParams, opts ...ClientOption) (*PostUsersApikeysOK, error)

	PostUsersLogin(params *PostUsersLoginParams, opts ...ClientOption) (*PostUsersLoginOK, error)

	PostUsersOauthLink(params *PostUsersOauthLinkParams, opts ...ClientOption) (*PostUsersOauthLinkOK, error)

	PutUsersID(params *PutUsersIDParams, opts ...ClientOption) (*PutUsersIDOK, error)

	PutUsersPreferences(params *PutUsersPreferencesParams, opts ...ClientOption) (*PutUsersPreferencesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteUsersApikeysID deletes API key

Delete an API key
*/
func (a *Client) DeleteUsersApikeysID(params *DeleteUsersApikeysIDParams, opts ...ClientOption) (*DeleteUsersApikeysIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersApikeysIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUsersApikeysID",
		Method:             "DELETE",
		PathPattern:        "/users/apikeys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsersApikeysIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsersApikeysIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUsersApikeysID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsersID deletes a user

Delete a user from the system
*/
func (a *Client) DeleteUsersID(params *DeleteUsersIDParams, opts ...ClientOption) (*DeleteUsersIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUsersID",
		Method:             "DELETE",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsersIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUsersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsersOauthUnlinkIDProvider unlinks o auth account

Unlink an OAuth account from a user
*/
func (a *Client) DeleteUsersOauthUnlinkIDProvider(params *DeleteUsersOauthUnlinkIDProviderParams, opts ...ClientOption) (*DeleteUsersOauthUnlinkIDProviderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersOauthUnlinkIDProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUsersOauthUnlinkIDProvider",
		Method:             "DELETE",
		PathPattern:        "/users/oauth/unlink/{id}/{provider}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsersOauthUnlinkIDProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsersOauthUnlinkIDProviderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUsersOauthUnlinkIDProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsers lists users

Get a list of users with optional filtering
*/
func (a *Client) GetUsers(params *GetUsersParams, opts ...ClientOption) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsersApikeys lists API keys

Get all API keys for a user
*/
func (a *Client) GetUsersApikeys(params *GetUsersApikeysParams, opts ...ClientOption) (*GetUsersApikeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersApikeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersApikeys",
		Method:             "GET",
		PathPattern:        "/users/apikeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersApikeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersApikeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersApikeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsersID gets a user by ID

Get detailed information about a specific user
*/
func (a *Client) GetUsersID(params *GetUsersIDParams, opts ...ClientOption) (*GetUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersID",
		Method:             "GET",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsersMe gets current user profile

Get detailed information about the currently authenticated user
*/
func (a *Client) GetUsersMe(params *GetUsersMeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersMeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersMe",
		Method:             "GET",
		PathPattern:        "/users/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersMeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersMeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersMe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUsers creates a new user

Create a new user in the system
*/
func (a *Client) PostUsers(params *PostUsersParams, opts ...ClientOption) (*PostUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUsers",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUsersApikeys creates API key

Create a new API key for a user
*/
func (a *Client) PostUsersApikeys(params *PostUsersApikeysParams, opts ...ClientOption) (*PostUsersApikeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersApikeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUsersApikeys",
		Method:             "POST",
		PathPattern:        "/users/apikeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUsersApikeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUsersApikeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUsersApikeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUsersLogin logins user

Authenticate a user with username/email and password
*/
func (a *Client) PostUsersLogin(params *PostUsersLoginParams, opts ...ClientOption) (*PostUsersLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUsersLogin",
		Method:             "POST",
		PathPattern:        "/users/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUsersLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUsersLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUsersLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUsersOauthLink links o auth account

Link an OAuth account to an existing user
*/
func (a *Client) PostUsersOauthLink(params *PostUsersOauthLinkParams, opts ...ClientOption) (*PostUsersOauthLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersOauthLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUsersOauthLink",
		Method:             "POST",
		PathPattern:        "/users/oauth/link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUsersOauthLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUsersOauthLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUsersOauthLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutUsersID updates a user

Update user information
*/
func (a *Client) PutUsersID(params *PutUsersIDParams, opts ...ClientOption) (*PutUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutUsersID",
		Method:             "PUT",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUsersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUsersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUsersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutUsersPreferences updates user preferences

Update preferences for the current user
*/
func (a *Client) PutUsersPreferences(params *PutUsersPreferencesParams, opts ...ClientOption) (*PutUsersPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutUsersPreferences",
		Method:             "PUT",
		PathPattern:        "/users/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUsersPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUsersPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUsersPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
