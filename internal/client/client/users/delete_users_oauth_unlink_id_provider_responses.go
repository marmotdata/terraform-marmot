// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/marmotdata/terraform-provider-marmot/internal/client/models"
)

// DeleteUsersOauthUnlinkIDProviderReader is a Reader for the DeleteUsersOauthUnlinkIDProvider structure.
type DeleteUsersOauthUnlinkIDProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUsersOauthUnlinkIDProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteUsersOauthUnlinkIDProviderNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteUsersOauthUnlinkIDProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /users/oauth/unlink/{id}/{provider}] DeleteUsersOauthUnlinkIDProvider", response, response.Code())
	}
}

// NewDeleteUsersOauthUnlinkIDProviderNoContent creates a DeleteUsersOauthUnlinkIDProviderNoContent with default headers values
func NewDeleteUsersOauthUnlinkIDProviderNoContent() *DeleteUsersOauthUnlinkIDProviderNoContent {
	return &DeleteUsersOauthUnlinkIDProviderNoContent{}
}

/*
DeleteUsersOauthUnlinkIDProviderNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteUsersOauthUnlinkIDProviderNoContent struct {
}

// IsSuccess returns true when this delete users oauth unlink Id provider no content response has a 2xx status code
func (o *DeleteUsersOauthUnlinkIDProviderNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete users oauth unlink Id provider no content response has a 3xx status code
func (o *DeleteUsersOauthUnlinkIDProviderNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete users oauth unlink Id provider no content response has a 4xx status code
func (o *DeleteUsersOauthUnlinkIDProviderNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete users oauth unlink Id provider no content response has a 5xx status code
func (o *DeleteUsersOauthUnlinkIDProviderNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete users oauth unlink Id provider no content response a status code equal to that given
func (o *DeleteUsersOauthUnlinkIDProviderNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete users oauth unlink Id provider no content response
func (o *DeleteUsersOauthUnlinkIDProviderNoContent) Code() int {
	return 204
}

func (o *DeleteUsersOauthUnlinkIDProviderNoContent) Error() string {
	return fmt.Sprintf("[DELETE /users/oauth/unlink/{id}/{provider}][%d] deleteUsersOauthUnlinkIdProviderNoContent", 204)
}

func (o *DeleteUsersOauthUnlinkIDProviderNoContent) String() string {
	return fmt.Sprintf("[DELETE /users/oauth/unlink/{id}/{provider}][%d] deleteUsersOauthUnlinkIdProviderNoContent", 204)
}

func (o *DeleteUsersOauthUnlinkIDProviderNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUsersOauthUnlinkIDProviderBadRequest creates a DeleteUsersOauthUnlinkIDProviderBadRequest with default headers values
func NewDeleteUsersOauthUnlinkIDProviderBadRequest() *DeleteUsersOauthUnlinkIDProviderBadRequest {
	return &DeleteUsersOauthUnlinkIDProviderBadRequest{}
}

/*
DeleteUsersOauthUnlinkIDProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteUsersOauthUnlinkIDProviderBadRequest struct {
	Payload *models.CommonErrorResponse
}

// IsSuccess returns true when this delete users oauth unlink Id provider bad request response has a 2xx status code
func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete users oauth unlink Id provider bad request response has a 3xx status code
func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete users oauth unlink Id provider bad request response has a 4xx status code
func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete users oauth unlink Id provider bad request response has a 5xx status code
func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete users oauth unlink Id provider bad request response a status code equal to that given
func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete users oauth unlink Id provider bad request response
func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) Code() int {
	return 400
}

func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /users/oauth/unlink/{id}/{provider}][%d] deleteUsersOauthUnlinkIdProviderBadRequest %s", 400, payload)
}

func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /users/oauth/unlink/{id}/{provider}][%d] deleteUsersOauthUnlinkIdProviderBadRequest %s", 400, payload)
}

func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) GetPayload() *models.CommonErrorResponse {
	return o.Payload
}

func (o *DeleteUsersOauthUnlinkIDProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
