// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUsersParams creates a new GetUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUsersParams() *GetUsersParams {
	return &GetUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersParamsWithTimeout creates a new GetUsersParams object
// with the ability to set a timeout on a request.
func NewGetUsersParamsWithTimeout(timeout time.Duration) *GetUsersParams {
	return &GetUsersParams{
		timeout: timeout,
	}
}

// NewGetUsersParamsWithContext creates a new GetUsersParams object
// with the ability to set a context for a request.
func NewGetUsersParamsWithContext(ctx context.Context) *GetUsersParams {
	return &GetUsersParams{
		Context: ctx,
	}
}

// NewGetUsersParamsWithHTTPClient creates a new GetUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUsersParamsWithHTTPClient(client *http.Client) *GetUsersParams {
	return &GetUsersParams{
		HTTPClient: client,
	}
}

/*
GetUsersParams contains all the parameters to send to the API endpoint

	for the get users operation.

	Typically these are written to a http.Request.
*/
type GetUsersParams struct {

	/* Active.

	   Filter by active status
	*/
	Active *bool

	/* Limit.

	   Number of items to return

	   Default: 50
	*/
	Limit *int64

	/* Offset.

	   Number of items to skip
	*/
	Offset *int64

	/* Query.

	   Search query for username or email
	*/
	Query *string

	/* RoleIds.

	   Filter by role IDs
	*/
	RoleIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersParams) WithDefaults() *GetUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersParams) SetDefaults() {
	var (
		limitDefault = int64(50)

		offsetDefault = int64(0)
	)

	val := GetUsersParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get users params
func (o *GetUsersParams) WithTimeout(timeout time.Duration) *GetUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users params
func (o *GetUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users params
func (o *GetUsersParams) WithContext(ctx context.Context) *GetUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users params
func (o *GetUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) WithHTTPClient(client *http.Client) *GetUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the get users params
func (o *GetUsersParams) WithActive(active *bool) *GetUsersParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the get users params
func (o *GetUsersParams) SetActive(active *bool) {
	o.Active = active
}

// WithLimit adds the limit to the get users params
func (o *GetUsersParams) WithLimit(limit *int64) *GetUsersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get users params
func (o *GetUsersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get users params
func (o *GetUsersParams) WithOffset(offset *int64) *GetUsersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get users params
func (o *GetUsersParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQuery adds the query to the get users params
func (o *GetUsersParams) WithQuery(query *string) *GetUsersParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get users params
func (o *GetUsersParams) SetQuery(query *string) {
	o.Query = query
}

// WithRoleIds adds the roleIds to the get users params
func (o *GetUsersParams) WithRoleIds(roleIds []string) *GetUsersParams {
	o.SetRoleIds(roleIds)
	return o
}

// SetRoleIds adds the roleIds to the get users params
func (o *GetUsersParams) SetRoleIds(roleIds []string) {
	o.RoleIds = roleIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.RoleIds != nil {

		// binding items for role_ids
		joinedRoleIds := o.bindParamRoleIds(reg)

		// query array param role_ids
		if err := r.SetQueryParam("role_ids", joinedRoleIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetUsers binds the parameter role_ids
func (o *GetUsersParams) bindParamRoleIds(formats strfmt.Registry) []string {
	roleIdsIR := o.RoleIds

	var roleIdsIC []string
	for _, roleIdsIIR := range roleIdsIR { // explode []string

		roleIdsIIV := roleIdsIIR // string as string
		roleIdsIC = append(roleIdsIC, roleIdsIIV)
	}

	// items.CollectionFormat: "csv"
	roleIdsIS := swag.JoinByFormat(roleIdsIC, "csv")

	return roleIdsIS
}
