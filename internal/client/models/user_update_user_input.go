// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserUpdateUserInput user update user input
//
// swagger:model user.UpdateUserInput
type UserUpdateUserInput struct {

	// active
	Active bool `json:"active,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// password
	// Min Length: 8
	Password string `json:"password,omitempty"`

	// preferences
	Preferences interface{} `json:"preferences,omitempty"`

	// role names
	// Min Items: 1
	RoleNames []string `json:"role_names"`
}

// Validate validates this user update user input
func (m *UserUpdateUserInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserUpdateUserInput) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", m.Password, 8); err != nil {
		return err
	}

	return nil
}

func (m *UserUpdateUserInput) validateRoleNames(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleNames) { // not required
		return nil
	}

	iRoleNamesSize := int64(len(m.RoleNames))

	if err := validate.MinItems("role_names", "body", iRoleNamesSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user update user input based on context it is used
func (m *UserUpdateUserInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserUpdateUserInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserUpdateUserInput) UnmarshalBinary(b []byte) error {
	var res UserUpdateUserInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
