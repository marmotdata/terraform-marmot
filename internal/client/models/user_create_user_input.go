// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserCreateUserInput user create user input
//
// swagger:model user.CreateUserInput
type UserCreateUserInput struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// OAuth-related fields
	OauthProvider string `json:"oauth_provider,omitempty"`

	// oauth provider data
	OauthProviderData interface{} `json:"oauth_provider_data,omitempty"`

	// oauth provider id
	OauthProviderID string `json:"oauth_provider_id,omitempty"`

	// password
	// Min Length: 8
	Password string `json:"password,omitempty"`

	// role names
	// Required: true
	// Min Items: 1
	RoleNames []string `json:"role_names"`

	// username
	// Required: true
	// Max Length: 255
	// Min Length: 3
	Username *string `json:"username"`
}

// Validate validates this user create user input
func (m *UserCreateUserInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserCreateUserInput) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserCreateUserInput) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", m.Password, 8); err != nil {
		return err
	}

	return nil
}

func (m *UserCreateUserInput) validateRoleNames(formats strfmt.Registry) error {

	if err := validate.Required("role_names", "body", m.RoleNames); err != nil {
		return err
	}

	iRoleNamesSize := int64(len(m.RoleNames))

	if err := validate.MinItems("role_names", "body", iRoleNamesSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *UserCreateUserInput) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user create user input based on context it is used
func (m *UserCreateUserInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserCreateUserInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserCreateUserInput) UnmarshalBinary(b []byte) error {
	var res UserCreateUserInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
